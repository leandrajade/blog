 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tasks", type: :request do

  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) {
    {
      :category_id => Category.create(name:"unique name").id,
      :name => 'test task name',
      :details => 'test task details',
      :scheduled_at => Time.new.strftime("%Y-%m-%d %H:%I:S")
    }
  }

  let(:invalid_attributes) {
    {
      :category => nil,
      :name => nil,
      :details => nil,
      :scheduled_at => nil,
      :category_id => Category.create(name:"unique name").id,

    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Task.create! valid_attributes
      category = Category.create!(name:"uniq name") 
      get category_path(category) 
   
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      task = Task.create! valid_attributes
      category = Category.create!(name:"uniq name 3") 
      get category_task_path(category, task)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      category = Category.create!(name:"uniq name 2") 
      get category_path(category)

      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      task = Task.create! valid_attributes
      category = Category.create!(name:"uniq name") 

      get edit_category_task_path(category, task)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Task" do
        task = Task.create! valid_attributes
        category = Category.create!(name:"uniq name") 
        expect {
          post category_tasks_path(category), params: { task: valid_attributes }
        }.to change(Task, :count).by(1)
      end

      it "redirects to the created task" do
        task = Task.create! valid_attributes
        category = Category.create!(name:"uniq name") 
        
        post category_tasks_path(category), params: { task: valid_attributes }
        expect(response).to redirect_to(category_task_path(category, Task.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Task" do
        # task = Task.create! invalid_attributes
        category = Category.create!(name:"uniq name") 
        
        expect {
          post category_tasks_path(category), params: { task: invalid_attributes }
        }.to change(Task, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        task = Task.create invalid_attributes
        category = Category.create!(name:"uniq name") 

        post category_tasks_path(category, task)
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
         :name => "new name",
         :details => "new test task details",
         :scheduled_at => Time.new.strftime("%Y-%m-%d %H:%I:S") 
        }
      }

      it "updates the requested task" do
        task = Task.create! valid_attributes
        patch task_url(task), params: { task: new_attributes }
        task.reload

        expect(task.name).to eq("new name")
        expect(task.details).to eq("new test task details")
        expect(task.scheduled_at).to eq(Time.new.strftime("%Y-%m-%d %H:%I:S"))
      end

      it "redirects to the task" do
        task = Task.create! valid_attributes
        patch task_url(task), params: { task: new_attributes }
        task.reload
        expect(response).to redirect_to(task_url(task))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        task = Task.create! valid_attributes
        patch task_url(task), params: { task: invalid_attributes }
        expect(response).to have_http_status(422)

        # expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested task" do
      task = Task.create! valid_attributes
      category = Category.create!(name:"uniq name") 

      expect {
        delete category_task_path(category, task)
      }.to change(Task, :count).by(-1)
    end

    it "redirects to the tasks list" do
      task = Task.create! valid_attributes
      category = Category.create!(name:"uniq name") 

      delete category_task_path(category, task)
      expect(response).to redirect_to(category_path(category))
    end
  end
end
